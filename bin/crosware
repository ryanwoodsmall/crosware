#!/usr/bin/env bash

#
# crosware
#  driver script to bootstrap and install software
#

#
# we'll use these everywhere
#
export cwname="crosware"
if [[ ${0} =~ ^/dev/fd/ ]] ; then
  scriptname="${cwname}"
else
  scriptname="$(basename -- ${0})"
fi

function cwscriptecho() {
  local scriptmesg="${@}"
  echo -e "${scriptname}: ${scriptmesg}"
}

function cwstderrecho() {
  cwscriptecho "${@}" 1>&2
}

function cwfailexit() {
  local failmesg="error"
  if [ ! -z "${@}" ] ; then
    failmesg="${1}"
  fi
  cwscriptecho "${failmesg}"
  exit 1
}

#
# shell feature and usage check
#

# make sure we're using bash and not sourced
if [ -z "${BASH_SOURCE}" -o "$(basename -- ${0})" != "$(basename -- ${BASH_SOURCE})" ] ; then
  echo "please execute this script instead of sourcing it"
  if [ "${0}" != "${BASH_SOURCE}" ] ; then
    return
  fi
  exit 1
fi

# check that we're using bash 4
if [ ${BASH_VERSINFO[0]} -lt 4 ] ; then
  cwfailexit "please make sure GNU Bash 4+ is in use"
fi

# exit early, exit often
set -eu

#
# prereqs
#
# XXX - curl, sha256sum, ... ? what else? check for tls/ssl support?
#       xz/xzcat? bzip2/bzcat? gzip?
#

function cwprereqinfo() {
  cwscriptecho ""
  cwscriptecho "you can download static busybox and curl binaries here:"
  cwscriptecho ""
  cwscriptecho "  https://github.com/ryanwoodsmall/static-binaries"
  cwscriptecho ""
  cwscriptecho "temporarily ignore missing prereqs to install supporting static binaries:"
  cwscriptecho ""
  cwscriptecho "  env CW_IGNORE_MISSING=true crosware install cwstaticbinaries"
  cwscriptecho ""
  cwscriptecho "a few static binaries can be used as a bootstrap userspace:"
  cwscriptecho ""
  cwscriptecho "  bash scripts/install-static-bins.sh"
  cwscriptecho "  # or: curl https://github.com/ryanwoodsmall/crosware/raw/master/scripts/install-static-bins.sh | bash"
  cwscriptecho "  # or: wget -O - https://github.com/ryanwoodsmall/crosware/raw/master/scripts/install-static-bins.sh | bash"
  cwscriptecho ""
  cwscriptecho "use the new temp userspace with an environment setting:"
  cwscriptecho ""
  cwscriptecho "  env PATH=/usr/local/crosware/tmp/static/bin:\${PATH} crosware"
  cwscriptecho "  # or: export PATH=\${PATH}:/usr/local/crosware/tmp/static/bin ; crosware"
  cwscriptecho ""
}

# by default, fail on missing prereqs; set to `true` to keep going
: ${CW_IGNORE_MISSING:="false"}
prereqs=( 'bzip2' 'curl' 'gzip' 'nproc' 'sha256sum' 'tar' )
for prereq in ${prereqs[@]} ; do
  hash "${prereq}" >/dev/null 2>&1 || {
    cwscriptecho "${prereq} not found"
    if [[ ${CW_IGNORE_MISSING} == true ]] ; then
      cwscriptecho "continuing anyway"
      continue
    fi
    cwprereqinfo
    cwfailexit "exiting"
  }
done

#
# script options/commands/variables
#
: ${cwurl:="https://github.com/ryanwoodsmall/${cwname}.git"}
: ${cworigin:="origin"}
: ${cwbranch:="master"}
declare -A cwcmds
cwcmds["help"]="show help"
cwcmds["bootstrap"]="bootstrap ${cwname}"
cwcmds["env"]="dump source-/eval-able ${cwname} etc/profile"
cwcmds["profile"]="show .profile addition"
cwcmds["list-recipes"]="list build recipes"
cwcmds["list-recipe-deps"]="list recipes with their declared dependencies"
cwcmds["list-recipe-files"]="list recipes with their source file"
cwcmds["list-recipe-versions"]="list recipes with version number"
cwcmds["list-recipe-reqs"]="list recipes with their requirements"
cwcmds["list-recipe-reqs-expanded"]="list recipes with their expanded requirements"
cwcmds["list-recipe-transitive-reqs"]="list recipes with only transitive requirements"
cwcmds["install"]="attempt to build/install a package from a known recipe"
cwcmds["update"]="attempt to update existing install of ${cwname}"
cwcmds["list-installed"]="list installed recipes"
cwcmds["list-installed-reqs"]="list installed recipes with their requirements"
cwcmds["uninstall"]="uninstall some packages"
cwcmds["set"]="run 'set' to show full ${cwname} environment"
cwcmds["list-available"]="list available recipes which are not installed"
cwcmds["list-upgradable"]="list installed packages with available upgrades"
cwcmds["list-funcs"]="list ${cwname} shell functions"
cwcmds["run-func"]="run ${cwname} shell function"
cwcmds["show-func"]="show the given function name"
cwcmds["show-env"]="run 'env' to show ${cwname} environment"
cwcmds["upgrade"]="uninstall then install a recipe"
cwcmds["upgrade-all"]="upgrade all packages with different recipe versions"
cwcmds["upgrade-all-with-deps"]="upgrade out-of-date packages and installed dependents"
cwcmds["upgrade-deps"]="upgrade any installed deps of a package"
cwcmds["upgrade-with-deps"]="upgrade a package and installed depdendents"
cwcmds["show-karch"]="show kernel architecture"
cwcmds["show-uarch"]="show userspace architecture"
cwcmds["show-arch"]="show kernel and userspace architecture"
cwcmds["check-installed"]="given a package name, check if it's installed"
cwcmds["reinstall"]="uninstall then install given packages without chasing upgrades"
cwcmds["update-upgrade-all"]="update crosware and upgrade out-of-date recipes"
cwcmds["update-list-upgradable"]="update crosware and list upgradable recipes"
# XXX - does this need to be an associative array to generate case ..) statements?
cwcmdaliases=( 'list-upgradeable' )
cwcmdlist=( $(echo ${!cwcmds[@]} ${cwcmdaliases[@]} | tr ' ' '\n' | sort | xargs echo) )

#
# common commands
#
# extract commands
export cwuntar="tar -xf"
export cwuntbz2="tar -jxf"
export cwuntgz="tar -zxf"
export cwuntxz="tar -Jxf"
export cwunzip="unzip -o"

#
# common opts
#
# curl
#   -f for fail on http error
#   -k accept insecure certs
#   -L follow redirects
#   -s for silent downloads?
: ${cwcurl:="curl"}
export cwcurl
: ${cwcurlopts:="-f -k -L -s"}
export cwcurlopts
# make
#   -j # of parallel jobs
: ${cwmakejobs:="$(($(nproc)+1))"}
export cwmakejobs

#
# where we live
#
# XXX - default to /usr/local/crosware but allow override (that may or may not work)
: ${cwtop:="/usr/local/${cwname}"}
export cwtop
export cwbin="${cwtop}/bin"
export cwbuild="${cwtop}/builds"
export cwdl="${cwtop}/downloads"
export cwetc="${cwtop}/etc"
export cwrecipe="${cwtop}/recipes"
export cwetcprofile="${cwetc}/profile"
export cwetcprofd="${cwetc}/profile.d"
export cwsw="${cwtop}/software"
export cwtmp="${cwtop}/tmp"
export cwvar="${cwtop}/var"
export cwvarinst="${cwvar}/inst"

# we'll use this for bootstrap since /tmp may be mounted noexec
: ${cwtmptmp:="/usr/local/tmp"}
export cwtmptmp

# temp dir permissions
export cwtmpperm="1777"

# execute perms
export cwexecperm="775"

# start off with an empty recipe and installed list
declare -A cwrecipes cwrecipefiles cwrecipereqs cwrecipeexpreqs cwrecipereqsexpanded cwrecipeversions cwbootstraprecipes cwinstalled cwupgraded cwtoupgrade
export cwrecipes
export cwrecipefiles
export cwrecipereqs
export cwrecipeexpreqs
export cwrecipereqsexpanded
export cwrecipeversions
export cwbootstraprecipes
export cwinstalled
export cwupgraded
export cwtoupgrade

# stuff we'll use for optimizing slow functions, not reading the same files over and over, etc.
declare -A cwprofhash
export cwprofhash
export cwrecipessourced=0
export cwprofileinit=0
export cwfunctionssourced=0

# lists: messages, functions, etc.
declare -a cwmessages cwfunctions
export cwmessages=()
export cwfunctions=()

# and a "user-visible" var whether we want to use an external jvm/jdk
: ${CW_USE_JAVA:="true"}
: ${CW_EXT_JAVA:="false"}
export CW_USE_JAVA CW_EXT_JAVA
# same for git, default to jgit.sh
: ${CW_USE_JGIT:="true"}
: ${CW_EXT_JGIT:="false"}
: ${CW_GIT_CMD:="jgitsh"}
export CW_USE_JGIT CW_EXT_JGIT CW_GIT_CMD
# update methods, prefer git, fallback to zip
: ${CW_UPDATE_USE_GIT:="true"}
: ${CW_UPDATE_USE_ZIP:="true"}
# time travel?
: ${TS:="$(date '+%Y%m%d%H%M%S')"}
export TS

#
# supported architecture check
#

# architecture names and support
supported_arches=( aarch64 armv6l armv7l armv8l i686 x86_64 riscv64 )
# qemu-x86_64 on k1om reports x86-64, this should be safe for now
export karch="$(uname -m | tr '-' '_')"

# be somewhat strict about supported architectures
supported=0
for supported_arch in ${supported_arches[@]} ; do
  if [[ ${karch} =~ ^${supported_arch}$ ]] ; then
    supported=1
  fi
done
if [ ${supported} -eq 0 ] ; then
  cwfailexit "architecture ${karch} not supported"
fi

#
# userspace vs kernel architecture check
#

# userspace may be different than kernel, i.e., 32-bit arm on 64-bit aarch64
# we'll use the first chunk of bash $MACHTYPE environment variable
# it will be something like:
#   x86_64-cros-linux-gnu (x86_64 chrome os)
#   armv7a-cros-linux-gnu (armv7l and aarch64 chrome os with 32-bit userspace)
#   arm-unknown-linux-gnueabihf (armv7l (armv6l?) 32-bit debian/ubuntu/raspbian)
#   arm-unknown-linux-gnueabi (armv7l 32-bit debian?)
#   aarch64-unknown-linux-gnu (aarch64 full 64-bit debian/ubuntu)
#   aarch64-alpine-linux-musl (aarch64 full 64-bit alpine)
#   armv6-alpine-linux-musleabihf (armv6/armv7 32-bit alpine)
#   x86_64-generic-linux-gnu (intel clear linux)
#   x86_64-pc-linux-gnu (x86_64 debian/ubuntu)
#   x86_64-redhat-linux-gnu (x86_64 centos/rhel/fedora)
#   i586-alpine-linux-musl (x86 alpine)
#   i686-pc-linux-gnu (i686 debian/ubuntu)
#   i386-redhat-linux-gnu (i686 centos)
#   ...
# transform arm or armv7a to armv7l for parity with "uname -m"
# XXX - this assumes aarch64/x86_64 return the "right" $MACHTYPE
# XXX - this assumes we have hardware float on armv6/v7
# XXX - HOSTTYPE is the first part of MACHTYPE
export bash_triplet="${MACHTYPE}"
bash_arch="${MACHTYPE%%-*}"
if [[ ${bash_arch} =~ ^arm ]] ; then
  if [[ ${bash_arch} =~ ^armv5 ]] ; then
    cwfailexit "it looks like your machine type is ${MACHTYPE}; the minimum is armv6 with hardware float"
  fi
  if [[ ${karch} =~ ^aarch64 ]] ; then
    bash_arch="armv7l"
  elif [[ ${karch} =~ ^armv(6|7|8) ]] ; then
    bash_arch="${bash_arch/#arm*/$(uname -m)}"
  fi
elif [[ ${bash_arch} =~ ^i.86 ]] ; then
  bash_arch="i686"
fi
export uarch="${bash_arch}"

#
# a marker to start the end of environment vars/beginning of functions in set output
#
export zzz_crosware_cut_here_zzz='### CROSWARE_CUT_HERE ###'

#
# bootstrap vars
#

#
# zulu jdk setup (for bootstrap)
#

# XXX - zulu jdk arch will be uarch

# basic zulu vars
zulu_pkgname="zulu"
zulu_inst_dir="${cwsw}/${zulu_pkgname}"

# zulu environment
declare -A zulu_env
zulu_env["_JAVA_OPTIONS"]="-Djava.io.tmpdir=${cwtmp} -Djava.awt.headless=true"
zulu_env["JAVA_HOME"]="${zulu_inst_dir}/current"
zulu_env["PATH"]='${PATH}:${JAVA_HOME}/bin'
zulu_envs=( "_JAVA_OPTIONS" "JAVA_HOME" "PATH" )

# zulu jdk arch map
# XXX - arm 32-bit hard float assumption, again
declare -A zulu_jdk_arch
zulu_jdk_arch["aarch64"]="aarch64"
zulu_jdk_arch["armv6l"]="aarch32hf"
zulu_jdk_arch["armv7l"]="${zulu_jdk_arch['armv6l']}"
zulu_jdk_arch["armv8l"]="${zulu_jdk_arch['armv6l']}"
zulu_jdk_arch["i686"]="i686"
zulu_jdk_arch["x86_64"]="x64"
zulu_jdk_arch["riscv64"]="none"

# zulu jdk version map
declare -A zulu_jdk_ver
zulu_jdk_ver_base="11.68.17-ca-jdk11.0.21"
zulu_jdk_ver["aarch64"]="${zulu_jdk_ver_base}"
zulu_jdk_ver["armv6l"]="${zulu_jdk_ver_base}"
zulu_jdk_ver["armv7l"]="${zulu_jdk_ver['armv6l']}"
zulu_jdk_ver["armv8l"]="${zulu_jdk_ver['armv6l']}"
zulu_jdk_ver["i686"]="${zulu_jdk_ver_base}"
zulu_jdk_ver["x86_64"]="${zulu_jdk_ver_base}"
zulu_jdk_ver["riscv64"]="none"
zulu_ver="${zulu_jdk_ver[${uarch}]}"

# zulu jdk file sha256sum
declare -A zulu_jdk_sha256sum
zulu_jdk_sha256sum["aarch64"]="5638887df0e680c890b4c6f9543c9b61c96c90fb01f877d79ae57566466d3b3d"
zulu_jdk_sha256sum["armv6l"]="22b77de4bc46abd9b5463068ccd33e05d9ce6dd6fffb99dfab03e8c6d071b685"
zulu_jdk_sha256sum["armv7l"]="${zulu_jdk_sha256sum['armv6l']}"
zulu_jdk_sha256sum["armv8l"]="${zulu_jdk_sha256sum['armv6l']}"
zulu_jdk_sha256sum["i686"]="e0a8e9d8a8f5bab7caeab347fa9934761de79cb91967a9f8582f901b6b606eda"
zulu_jdk_sha256sum["x86_64"]="725aba257da4bca14959060fea3faf59005eafdc2d5ccc3cb745403c5b60fb27"
zulu_jdk_sha256sum["riscv64"]="none"

# zulu directory, file, and url map
declare -A zulu_jdk_dir zulu_jdk_file zulu_jdk_url
for supported_arch in ${supported_arches[@]} ; do
  zulu_jdk_dir[${supported_arch}]="zulu${zulu_jdk_ver[${supported_arch}]}-linux_${zulu_jdk_arch[${supported_arch}]}"
  if [[ ${supported_arch} =~ ^(i686|x86_64|aarch64)$ ]] ; then
    zulu_jdk_base_url="http://cdn.azul.com/zulu/bin"
  elif [[ ${supported_arch} =~ ^armv ]] ; then
    zulu_jdk_base_url="http://cdn.azul.com/zulu-embedded/bin"
  fi
  zulu_jdk_file[${supported_arch}]="${zulu_jdk_dir[${supported_arch}]}.tar.gz"
  zulu_jdk_url[${supported_arch}]="${zulu_jdk_base_url}/${zulu_jdk_file[${supported_arch}]}"
done

# zulu install function
function cwinstall_zulu() {
  cwfetchcheck "${zulu_jdk_url[${uarch}]}" "${cwtmptmp}/${zulu_jdk_file[${uarch}]}" "${zulu_jdk_sha256sum[${uarch}]}"
  cwextract "${cwtmptmp}/${zulu_jdk_file[${uarch}]}" "${zulu_inst_dir}"
  cwlinkdir "${zulu_jdk_dir[${uarch}]}" "${zulu_inst_dir}"
  cwexpandenv "${zulu_pkgname}" "${cwetcprofd}/${zulu_pkgname}.sh"
  cwmarkinstall "${zulu_pkgname}" "${zulu_jdk_ver[${uarch}]}"
}

#
# jgit
#

# XXX - make sure java tmpdir is set
jgitsh_ver="6.8.0.202311291450-r"
jgitsh_file="org.eclipse.jgit.pgm-${jgitsh_ver}.sh"
jgitsh_url="https://repo1.maven.org/maven2/org/eclipse/jgit/org.eclipse.jgit.pgm/${jgitsh_ver}/${jgitsh_file}"
jgitsh_sha256sum="764f272c3857da1acaa26689f187a5b38d6597f766c91db649300fd0b8225fa9"
jgitsh_symlink="jgit.sh"
jgitsh_pkgname="jgitsh"
jgitsh_inst_dir="${cwsw}/${jgitsh_pkgname}"

# jgit environment
declare -A jgitsh_env
jgitsh_env["PATH"]="\${PATH}:${jgitsh_inst_dir}/current/bin"
jgitsh_envs=( "PATH" )

# jgitsh install function
function cwinstall_jgitsh() {
  cwfetchcheck "${jgitsh_url}" "${cwtmptmp}/${jgitsh_file}" "${jgitsh_sha256sum}"
  chmod 775 "${cwtmptmp}/${jgitsh_file}"
  cwmkdir "${jgitsh_inst_dir}/${jgitsh_ver}/bin"
  rm -f "${jgitsh_inst_dir}/${jgitsh_ver}/bin/${jgitsh_file}"
  install -m 0755 "${cwtmptmp}/${jgitsh_file}" "${jgitsh_inst_dir}/${jgitsh_ver}/bin/"
  ln -sf "${jgitsh_file}" "${jgitsh_inst_dir}/${jgitsh_ver}/bin/${jgitsh_pkgname}"
  ln -sf "${jgitsh_file}" "${jgitsh_inst_dir}/${jgitsh_ver}/bin/${jgitsh_symlink}"
  ln -sf "${cwtop}/scripts/jgit" "${jgitsh_inst_dir}/${jgitsh_ver}/bin/jgit"
  cwlinkdir "${jgitsh_ver}" "${jgitsh_inst_dir}"
  cwexpandenv "${jgitsh_pkgname}" "${cwetcprofd}/${jgitsh_pkgname}.sh"
  cwmarkinstall "${jgitsh_pkgname}" "${jgitsh_ver}"
}

#
# static compiler bootstrap
#

# XXX - compiler arch will be karch/uname -m

# common static compiler release/tag, archive, and url
old_static_toolchain_pkgname="static-toolchain"
statictoolchain_archive_ext="tar.bz2"
statictoolchain_checksum_ext="sha256"
statictoolchain_release="202109250959"
statictoolchain_base_url="https://github.com/ryanwoodsmall/musl-misc/releases/download"
statictoolchain_release_url="${statictoolchain_base_url}/${statictoolchain_release}"
statictoolchain_pkgname="statictoolchain"
statictoolchain_inst_dir="${cwsw}/${statictoolchain_pkgname}"

# architecture to musl triplet
declare -A statictoolchain_triplet
statictoolchain_triplet["aarch64"]="aarch64-linux-musl"
statictoolchain_triplet["armv6l"]="arm-linux-musleabihf"
statictoolchain_triplet["armv7l"]="${statictoolchain_triplet['armv6l']}"
statictoolchain_triplet["armv8l"]="${statictoolchain_triplet['armv6l']}"
statictoolchain_triplet["i686"]="i686-linux-musl"
statictoolchain_triplet["x86_64"]="x86_64-linux-musl"
statictoolchain_triplet["riscv64"]="riscv64-linux-musl"

# architecture to version prefix
statictoolchain_ver="${statictoolchain_release}"
declare -A statictoolchain_prefix
statictoolchain_prefix["aarch64"]="${statictoolchain_ver}"
statictoolchain_prefix["armv6l"]="${statictoolchain_ver}"
statictoolchain_prefix["armv7l"]="${statictoolchain_ver}"
statictoolchain_prefix["armv8l"]="${statictoolchain_ver}"
statictoolchain_prefix["i686"]="${statictoolchain_ver}"
statictoolchain_prefix["x86_64"]="${statictoolchain_ver}"
statictoolchain_prefix["riscv64"]="${statictoolchain_ver}"

# architecture to filename, urls, sha256 file, dir, ...
declare -A statictoolchain_file statictoolchain_checksum statictoolchain_checksum_file statictoolchain_file_url statictoolchain_checksum_url statictoolchain_dir
for supported_arch in ${supported_arches[@]} ; do
  statictoolchain_file[${supported_arch}]="${statictoolchain_prefix[${supported_arch}]}-${statictoolchain_triplet[${supported_arch}]}.${statictoolchain_archive_ext}"
  statictoolchain_checksum_file[${supported_arch}]="${statictoolchain_file[${supported_arch}]}.${statictoolchain_checksum_ext}"
  statictoolchain_file_url[${supported_arch}]="${statictoolchain_release_url}/${statictoolchain_file[${supported_arch}]}"
  statictoolchain_checksum_url[${supported_arch}]="${statictoolchain_release_url}/${statictoolchain_checksum_file[${supported_arch}]}"
  statictoolchain_dir[${supported_arch}]="${statictoolchain_prefix[${supported_arch}]}-${statictoolchain_triplet[${supported_arch}]}"
done

# static toolchain environment
# XXX - set more ld flags? -s/--strip-all or -S/--strip-debug
declare -A statictoolchain_env
statictoolchain_env["PATH"]="${statictoolchain_inst_dir}/current/bin:\${PATH}"
statictoolchain_env["CFLAGS"]="-Wl,-static -fPIC"
statictoolchain_env["CXXFLAGS"]="-Wl,-static -fPIC"
statictoolchain_env["LDFLAGS"]="-static \${LDFLAGS//-static/}"
statictoolchain_env["CC"]="${statictoolchain_triplet[${karch}]}-gcc"
statictoolchain_env["CXX"]="${statictoolchain_triplet[${karch}]}-g++"
statictoolchain_env["LD"]="${statictoolchain_triplet[${karch}]}-ld"
statictoolchain_env["CPP"]="${statictoolchain_triplet[${karch}]}-cpp"
statictoolchain_env["AR"]="${statictoolchain_triplet[${karch}]}-ar"
statictoolchain_env["AS"]="${statictoolchain_triplet[${karch}]}-as"
statictoolchain_envs=( "PATH" "CFLAGS" "CXXFLAGS" "LDFLAGS" "CC" "CXX" "CPP" "LD" "AR" "AS" )

# statictoolchain install function
function cwinstall_statictoolchain() {
  cwfetch "${statictoolchain_checksum_url[${karch}]}" "${cwtmptmp}/${statictoolchain_checksum_file[${karch}]}"
  cwfetchcheck "${statictoolchain_file_url[${karch}]}" "${cwtmptmp}/${statictoolchain_file[${karch}]}" "$(awk '{print $1}' ${cwtmptmp}/${statictoolchain_checksum_file[${karch}]})"
  cwextract "${cwtmptmp}/${statictoolchain_file[${karch}]}" "${statictoolchain_inst_dir}"
  cwlinkdir "${statictoolchain_dir[${karch}]}" "${statictoolchain_inst_dir}"
  cwexpandenv "${statictoolchain_pkgname}" "${cwetcprofd}/${statictoolchain_pkgname}.sh"
  cwmarkinstall "${statictoolchain_pkgname}" "${statictoolchain_prefix[${karch}]}"
  rm -rf "${cwsw}/${old_static_toolchain_pkgname}"
}

#
# "special" bootstrap recipes
#
for cwbootstraprecipe in "${zulu_pkgname}" "${jgitsh_pkgname}" "${statictoolchain_pkgname}" ; do
  cwbootstraprecipes["${cwbootstraprecipe}"]=1
done
export cwbootstraprecipes

#
# generate cw*_${bootstraprecipe} functions
#
for cwbootstraprecipe in ${!cwbootstraprecipes[@]} ; do
  eval "
  function cwver_${cwbootstraprecipe}() {
    echo \"\${${cwbootstraprecipe}_ver}\"
  }
  function cwuninstall_${cwbootstraprecipe}() {
    rm -rf \"${cwsw}/\${${cwbootstraprecipe}_pkgname}\"
    rm -f \"${cwetcprofd}/\${${cwbootstraprecipe}_pkgname}.sh\"
    rm -f \"${cwvarinst}/${cwbootstraprecipe}\"
  }
  function cwlistreqs_${cwbootstraprecipe}() {
    echo \"\"
  }
  function cwreqs_${cwbootstraprecipe}() {
    echo \"\"
  }
  function cwupgrade_${cwbootstraprecipe}() {
    cwscriptecho \"upgrading ${cwbootstraprecipe}\"
    cwuninstall_${cwbootstraprecipe}
    cwinstall_${cwbootstraprecipe}
    cwmarkupgraded ${cwbootstraprecipe}
  }
  function cwupgradedeps_${cwbootstraprecipe}() { true ; }
  function cwupgradereqs_${cwbootstraprecipe}() { true ; }
  function cwupgradewithdeps_${cwbootstraprecipe}() { cwupgrade_${cwbootstraprecipe} ; }
  function cwprof_${cwbootstraprecipe}() {
    echo \"${cwetcprofd}/\${${cwbootstraprecipe}_pkgname}.sh\"
  }
  function cwgenprofd_${cwbootstraprecipe}() {
    cwexpandenv \"\${${cwbootstraprecipe}_pkgname}\" \"${cwetcprofd}/\${${cwbootstraprecipe}_pkgname}.sh\"
  }
  function cwmarkinstall_${cwbootstraprecipe}() {
    cwmarkinstall \"${cwbootstraprecipe}\" \"\$(cwver_${cwbootstraprecipe})\"
  }
  "
  cwrecipefiles[${cwbootstraprecipe}]="${cwtop}/bin/crosware"
  cwrecipeversions[${cwbootstraprecipe}]="$(cwver_${cwbootstraprecipe})"
  cwrecipereqs[${cwbootstraprecipe}]=""
  cwrecipeexpreqs[${cwbootstraprecipe}]=""
  cwrecipereqsexpanded[${cwbootstraprecipe}]=1
done

#
# cwchecktop
#
function cwchecktop() {
  if [ ! -e "${cwtop}" ] ; then
    cwfailexit "${cwtop} does not exist, have you run '${cwname} bootstrap' yet?"
  fi
}

#
# cwmkdir
#   mkdir -p with check/wrapper
#
function cwmkdir() {
  local tgtdir="${1}"
  if [ ! -e "${tgtdir}" ] ; then
    cwscriptecho "creating directory ${tgtdir}"
    mkdir -p "${tgtdir}" || cwfailexit "could not create ${tgtdir}"
  fi
  test -e "${tgtdir}" || cwfailexit "${tgtdir} still doesn't exist"
}

#
# cwchmod
#   chmod wrapper
#   receives:
#     octal mode
#     path
#
function cwchmod() {
  local tgtmode="${1}"
  local tgtpath="${2}"
  cwscriptecho "setting mode ${tgtmode} on ${tgtpath}"
  chmod "${tgtmode}" "${tgtpath}" || cwfailexit "could not set mode ${tgtmode} on ${tgtpath}"
}

# cwmkcwtmptmp
#   check and make our temporary temporary directory
#
function cwmkcwtmptmp() {
  if [ ! -e "${cwtmptmp}" ] ; then
    cwmkdir "${cwtmptmp}"
    cwchmod "${cwtmpperm}" "${cwtmptmp}"
  fi
}

#
# cwfetch
#   receives:
#     url to download
#     full path to save file to
#
function cwfetch() {
  local downloadurl="${1}"
  local targetfile="${2}"
  local targetdir="$(dirname "${targetfile}")"
  cwmkdir "${targetdir}"
  cwscriptecho "downloading ${downloadurl} to ${targetfile}"
  if $(${cwcurl} ${cwcurlopts} -o "${targetfile}" "${downloadurl}") ; then
    cwscriptecho "successfully downloaded ${downloadurl} to ${targetfile}"
    return 0
  else
    : ${fakecurl:="${cwtop}/scripts/fakecurl.sh"}
    # XXX - command -v here?
    if [ -e "${fakecurl%% *}" ] ; then
      cwscriptecho "curl download failed for ${downloadurl}, trying ${fakecurl}"
      # XXX - what if it's not a script?
      bash ${fakecurl} "${downloadurl}" "${targetfile}" || cwfailexit "${fakecurl} failed for ${downloadurl}"
      return 0
    fi
    cwfailexit "curl failed for ${downloadurl}"
    return 1
  fi
}

#
# cwchecksha256sum
#   receives:
#     full path to file to check
#     sha256sum for comparison
#
function cwchecksha256sum() {
  local checkfile="${1}"
  local storedsha256sum="${2}"
  cwscriptecho "checking sha256sum for ${checkfile}"
  local sha256sum="$(sha256sum ${checkfile} | awk '{print $1}')"
  if [ "${storedsha256sum}" == "${sha256sum}" ] ; then
    cwscriptecho "sha256 checksum succeeded for ${checkfile}"
    return 0
  else
    cwscriptecho "sha256 checksum failed for ${checkfile}"
    return 1
  fi
}

#
# cwfetchcheck
#   receives:
#     url to download
#     full path to save file
#     sha256sum for comparison
#
function cwfetchcheck() {
  local downloadurl="${1}"
  local targetfile="${2}"
  local storedsha256sum="${3}"
  if [ -e "${targetfile}" ] ; then
    cwscriptecho "${targetfile} already exists"
    local sha256sum="$(sha256sum ${targetfile} | awk '{print $1}')"
    if [ "${storedsha256sum}" == "${sha256sum}" ] ; then
      cwscriptecho "existing ${targetfile} matched checksum"
      return
    else
      cwscriptecho "existing ${targetfile} failed checksum, redownloading"
    fi
  fi
  cwfetch "${downloadurl}" "${targetfile}"
  cwchecksha256sum "${targetfile}" "${storedsha256sum}" || cwfailexit "fetch and sha256 checksum of ${downloadurl} failed"
}

#
# cwextract
#   receives:
#     full path to file
#     target directory
#
function cwextract() {
  local archive="${1}"
  local tgtdir="${2}"
  test -e "${tgtdir}" || cwmkdir "${tgtdir}"
  cwscriptecho "extracting ${archive} to ${tgtdir}"
  if [[ ${archive} =~ \.t(|ar)(|.)bz(|2)$ ]] ; then
    ${cwuntbz2} "${archive}" -C "${tgtdir}"
  elif [[ ${archive} =~ \.t(|ar)(|.)gz$ ]] ; then
    ${cwuntgz} "${archive}" -C "${tgtdir}"
  elif [[ ${archive} =~ \.t(|ar)(|.)xz$ ]] ; then
    ${cwuntxz} "${archive}" -C "${tgtdir}"
  elif [[ ${archive} =~ \.t(|ar)(|.)lz$ ]] ; then
    lunzip -dc "${archive}" | ${cwuntar} - -C "${tgtdir}"
  elif [[ ${archive} =~ \.zip$ ]] ; then
    ${cwunzip} "${archive}" -d "${tgtdir}"
  else
    cwfailexit "archive type of ${archive} not understood"
  fi
  if [ ${?} -eq 0 ] ; then
    cwscriptecho "extraction of ${archive} succeeded"
  else
    cwfailexit "extraction of ${archive} failed"
  fi
}

#
# cwlinkdir
#   receives:
#     directory name/path (relative or full)
#     full path to a directory to run in
#
# shuffles previous/current symlinks
#
function cwlinkdir() {
  local linktgt="${1}"
  local linkdir="${2}"
  local prev="${linkdir}/previous"
  local curr="${linkdir}/current"
  cwscriptecho "setting up ${linktgt} symlink in ${linkdir}"
  if [ -e "${prev}" ] ; then
    rm -rf "${prev}" || cwfailexit "could not remove ${prev}"
  fi
  if [ -e "${curr}" ] ; then
    mv "${curr}" "${prev}" || cwfailexit "could not move ${curr} to ${prev}"
  fi
  ln -sf "${linktgt}" "${curr}" || cwfailexit "could not symlink ${linktgt} to ${curr}"
}

#
# cwexpandenv
#   receives:
#     name of var
#     full path of file to expand into
#
# expands environment variables for a given name
# assumes the existence of:
#   example_env['VAR']='value' - hash/associative array
#   example_envs[0]='VAR' - normal array controlling expanded vars and ordering
#
function cwexpandenv() {
  local name="${1}"
  local envfile="${2}"
  if [ -e "${envfile}" ] ; then
    rm -f "${envfile}" || cwfailexit "could not remove existing ${envfile}"
  fi
  echo -n > "${envfile}" || cwfailexit "could not (re)create ${envfile}"
  for var in $(eval echo \${${name}_envs[@]}) ; do
    echo "export ${var}=\"$(eval echo \${${name}_env[${var}]})\"" >> "${envfile}"
  done
}

#
# cwprofileline
#
function cwprofileline() {
  echo
  echo "  test -e ${cwetc}/profile && source ${cwetcprofile}"
  echo
}

#
# cwbootstrap
#
function cwbootstrap() {
  bootstrapped=1
  # check if we're already bootstrapped and fetch/merge if we are
  if [ -e "${cwtop}" ] ; then
    bootstrapped=0
  fi
  cwscriptecho "bootstrapping"
  # make sure we have a tmp directory
  cwmkcwtmptmp
  # architecture specfic toolchain checksum file
  local statictoolchainchecksumfile="${cwtmptmp}/${statictoolchain_checksum_file[${karch}]}"
  cwfetch "${statictoolchain_checksum_url[${karch}]}" "${statictoolchainchecksumfile}"
  local statictoolchainchecksum="$(awk '{print $1}' ${statictoolchainchecksumfile})"
  # static toolchain
  local statictoolchainarchive="${cwtmptmp}/${statictoolchain_file[${karch}]}"
  cwfetchcheck "${statictoolchain_file_url[${karch}]}" "${statictoolchainarchive}" "${statictoolchainchecksum}"
  # git
  # jgit
  if [ "${CW_USE_JGIT}" == "true" ] ; then
    if [ "${CW_EXT_JGIT}" == "false" ] ; then
      local jgitsh="${cwtmptmp}/${jgitsh_file}"
      cwfetchcheck "${jgitsh_url}" "${jgitsh}" "${jgitsh_sha256sum}"
      cwchmod "${cwexecperm}" "${jgitsh}"
      ln -sf "${jgitsh_file}" "${cwtmptmp}/${jgitsh_symlink}"
      ln -sf "${jgitsh_file}" "${cwtmptmp}/${jgitsh_pkgname}"
      export PATH="${cwtmptmp}:${PATH}"
    fi
  fi
  # zulu
  if [ "${CW_USE_JAVA}" == "true" -a "${CW_EXT_JAVA}" == "false" ] ; then
    local zuluarchive="${cwtmptmp}/${zulu_jdk_file[${uarch}]}"
    local zulujdkdir="${cwtmptmp}/${zulu_jdk_dir[${uarch}]}"
    cwfetchcheck "${zulu_jdk_url[${uarch}]}" "${zuluarchive}" "${zulu_jdk_sha256sum[${uarch}]}"
    cwextract "${zuluarchive}" "${cwtmptmp}"
    # add zulu and tmp dir (for jgit) to our path
    export JAVA_HOME="${zulujdkdir}"
    export PATH="${JAVA_HOME}/bin:${PATH}"
  fi
  # clone or fetch the repo
  if [ ${bootstrapped} -eq 1 ] ; then
    cwscriptecho "attempting to clone ${cwurl} into ${cwtop}"
    ${CW_GIT_CMD} clone "${cwurl}" "${cwtop}" || cwfailexit "could not clone ${cwurl} into ${cwtop}"
  else
    cwupdate
  fi
  # setup our base tools
  # zulu
  if [ "${CW_USE_JAVA}" == "true" -a "${CW_EXT_JAVA}" == "false" ] ; then
    cwinstall "${zulu_pkgname}"
  fi
  # git
  # jgit
  if [ "${CW_USE_JGIT}" == "true" ] ; then
    if [ "${CW_EXT_JGIT}" == "false" ] ; then
      cwinstall "${jgitsh_pkgname}"
    fi
  fi
  # toolchain
  cwinstall "${statictoolchain_pkgname}"
  # set tmp directory perm
  cwchmod "${cwtmpperm}" "${cwtmp}"
  # we're bootstrapped...
  cwscriptecho "bootstrap complete"
  cwscriptecho "add ${cwname} to your environment with a line in your .profile/.bash_profile/.bashrc"
  cwprofileline
  # cleanup temp files?
  if [ "${CW_USE_JAVA}" == "true" -a "${CW_EXT_JAVA}" == "false" ] ; then
    cwscriptecho "removing temporary zulu jdk directory"
    rm -rf "${zulujdkdir}"
  fi
  # if we have an old "static-toolchain" setup remove it
  if [ -e "${cwsw}/${old_static_toolchain_pkgname}" ] ; then
    rm -rf "${cwsw}/${old_static_toolchain_pkgname}"
  fi
  if [ -e "${cwvarinst}/${old_static_toolchain_pkgname}" ] ; then
    rm -f ${cwvarinst}/${old_static_toolchain_pkgname}
  fi
  if [ -e "${cwetcprofd}/${old_static_toolchain_pkgname}.sh" ] ; then
    mv ${cwetcprofd}/${old_static_toolchain_pkgname}.sh{,.OFF}
  fi
}

#
# cwoldsourceprofile
#   keep this around
#   put it back in action by append below cwsourceprofile...
#     function cwsourceprofile() { cwoldsourceprofile ; }
#
function cwoldsourceprofile() {
  cwchecktop
  if [ ! -e "${cwetcprofile}" ] ; then
    cwscriptecho "${cwetcprofile} does not exist"
    return 1
  fi
  source "${cwetcprofile}"
}

#
# cwnewsourceprofile
#   uses cwprofileinit, cwrecipessourced, and cwprofhash
#
# XXX - performance consistency is spotty here
#  slow machines (disk mostly, but also cpu) won't notice much of a speed gain - they're just slow
#  fast machines (ditto) will suffer on first run without caching, afterward will be consistent
#  sha256sum actually measures faster than stat here, guessing because of fs cache
#  somewhat complicated implementation here too
#  hmm
#
function cwnewsourceprofile() {
  cwchecktop
  if [ ! -e "${cwetcprofile}" ] ; then
    cwscriptecho "${cwetcprofile} does not exist"
    return 1
  fi
  local f
  local r
  local s
  if [ ${cwprofileinit} -eq 0 ] ; then
    source "${cwetcprofile}"
    if [ ${cwrecipessourced} -eq 0 ] ; then
      return
    else
      for r in $(cwgetallrecipes) ; do
        f="$(cwprof_${r})"
        if [ -e "${f}" ] ; then
          cwprofhash["${f}"]="$(sha256sum "${f}" | awk '{print $1}')"
        else
          cwprofhash["${f}"]=0
        fi
      done
      export cwprofileinit=1
      return
    fi
  fi
  for f in ${!cwprofhash[@]} ; do
    s=0
    if [ -e "${f}" ] ; then
      s="$(sha256sum "${f}" | awk '{print $1}')"
      if [ ! "${s}" == "${cwprofhash[${f}]}" ] ; then
        source "${f}"
        cwprofhash["${f}"]="${s}"
      fi
    else
      if [ ! "${s}" == "${cwprofhash[${f}]}" ] ; then
        cwprofhash["${f}"]="${s}"
      fi
    fi
  done
  unset f r s
}

#
# cwsourceprofile
#  call an implementation of cwsourceprofile
#
function cwsourceprofile() {
  local defaultimpl="old"
  : ${CW_PROFILE_IMPL:="${defaultimpl}"}
  if [[ ! ${CW_PROFILE_IMPL} =~ ^(old|new)$ ]] ; then
    CW_PROFILE_IMPL="${defaultimpl}"
  fi
  export CW_PROFILE_IMPL
  cw${CW_PROFILE_IMPL}sourceprofile
}

#
# cwupdate
#
# XXX - may be best to split up to cwupdate_zip and cwupdate_git
#
function cwupdate() {
  cwchecktop
  cwscriptecho "it looks like ${cwtop} already exists, attempting update"
  local zipscript="${cwtop}/scripts/update-crosware-from-zip.sh"
  if [[ ${CW_UPDATE_USE_GIT} =~ ^true$ ]] ; then
    if [ ! -e "${cwtop}/.git" ] ; then
      cwscriptecho "${cwtop} doesn't appear to be a git clone"
      if [[ ${CW_UPDATE_USE_ZIP} =~ ^true$ ]] ; then
        cwscriptecho "falling back to zip"
        bash "${zipscript}"
      fi
      return
    else
      cwsourceprofile
      if ! $(hash ${CW_GIT_CMD} >/dev/null 2>&1) ; then
        cwscriptecho "git client ${CW_GIT_CMD} not found"
        if [[ ${CW_UPDATE_USE_ZIP} =~ ^true$ ]] ; then
          cwscriptecho "falling back to zip"
          bash "${zipscript}"
        fi
        return
      fi
      cwscriptecho "attempting to update using a git client"
      cwscriptecho "attempting to fetch/merge in ${cwtop}"
      pushd "${cwtop}" >/dev/null 2>&1 || cwfailexit "could not pushd into ${cwtop}"
      cwscriptecho "${FUNCNAME[0]} using client ${CW_GIT_CMD}: $(${CW_GIT_CMD} version 2>/dev/null ; true)"
      ${CW_GIT_CMD} fetch "${cworigin}" || { popd ; cwfailexit "could not fetch ${cworigin} in ${cwtop}" ; }
      ${CW_GIT_CMD} merge "${cworigin}/${cwbranch}" || { popd ; cwfailexit "could not merge ${cworigin}/${cwbranch} in ${cwtop}" ; }
      popd >/dev/null 2>&1
      cwchmod "${cwtmpperm}" "${cwtmp}"
    fi
  elif [[ ${CW_UPDATE_USE_ZIP} =~ ^true$ ]] ; then
    cwscriptecho "attempting to update using a zip file via ${zipscript}"
    bash "${zipscript}"
  else
    cwscriptecho "don't know how to update"
  fi
}

#
# cwcheckrecipessourced
#   yeaup
function cwcheckrecipessourced() {
  test "${cwrecipessourced}" -eq 1
}

#
# cwsourcerecipes
#   sentinel for memoization: cwrecipessourced
#
function cwsourcerecipes() {
  cwchecktop
  if [ ! -e ${cwrecipe} ] ; then
    cwscriptecho "no recipe directory ${cwrecipe} found"
    return 1
  fi
  if [ ${cwrecipessourced} -eq 1 ] ; then
    return
  fi
  for recipefile in ${cwrecipe}/*/*.sh ; do
    rname=""
    source ${recipefile}
    if [ ! -z "${rname}" ] ; then
      cwrecipes["${rname}"]=1
      cwrecipefiles["${rname}"]="${recipefile}"
      cwrecipeversions["${rname}"]="${rver}"
      if [[ ${rreqs} =~ \{*\} ]] ; then
        cwrecipereqs["${rname}"]="$(cwreqs_${rname})"
      else
        cwrecipereqs["${rname}"]="${rreqs}"
      fi
      cwrecipeexpreqs["${rname}"]="$(cwnormalizeargs ${cwrecipereqs[${rname}]})"
      cwrecipereqsexpanded["${rname}"]=0
      cwmarkupgraded "${rname}"
    fi
    unset cwconfigureprefix rname rver rfile rurl rprof rreqs rbreqs rsha256 rdir ridir rbdir rtdir rdeps rbdeps rlibtool rconfigureopts rcommonopts rdlfile rpfile rsite rmessage
  done
  unset recipefile
  export cwrecipes
  export cwrecipessourced=1
}

#
# cwlistrecipes
#
function cwlistrecipes() {
  cwcheckrecipessourced || cwsourcerecipes
  for recipe in $(cwgetallrecipes) ; do
    echo "${recipe}"
  done | sort
}

#
# cwlistrecipefiles
#
function cwlistrecipefiles() {
  cwcheckrecipessourced || cwsourcerecipes
  for recipe in $(cwgetallrecipes) ; do
    echo "${recipe} : ${cwrecipefiles[${recipe}]}"
  done | sort
}

#
# cwlistrecipeversions
#
function cwlistrecipeversions() {
  cwcheckrecipessourced || cwsourcerecipes
  for recipe in $(cwgetallrecipes) ; do
    echo "${recipe} : ${cwrecipeversions[${recipe}]}"
  done | sort
}

#
# cwlistrecipereqs
#
function cwlistrecipereqs() {
  cwcheckrecipessourced || cwsourcerecipes
  for recipe in $(cwgetallrecipes) ; do
    echo "${recipe} : ${cwrecipereqs[${recipe}]}"
  done | sort
}

#
# cwinstall
#
# build/install some stuff
#
function cwinstall() {
  local recipestobuild=()
  cwsourceprofile
  cwcheckrecipessourced || cwsourcerecipes
  for recipe in "${@}" ; do
    declare -f "cwinstall_${recipe}" >/dev/null 2>&1 || cwfailexit "recipe ${recipe} not found"
    recipestobuild[${#recipestobuild[@]}]="cwinstall_${recipe}"
  done
  test ${#recipestobuild[@]} -eq 0 && cwfailexit "please provide at least one valid recipe to build"
  for buildrecipe in ${recipestobuild[@]} ; do
    cwsourceprofile
    cwscriptecho "installing recipe ${buildrecipe//cwinstall_/}"
    ${buildrecipe}
  done
}

#
# cwmarkinstall
#   receives:
#     package/recipe name
#     package/recipe version
#
# writes a file to ${cwvarinst}/${pkgname} containing the pkg version
#
function cwmarkinstall() {
  local pkgname="${1}"
  local pkgver="${2}"
  local pkgfile="${cwvarinst}/${pkgname}"
  cwmkdir "${cwvarinst}"
  echo "${pkgver}" > "${pkgfile}" || cwfailexit "could not write ${pkgfile}"
}

#
# cwlistinstalled
#
function cwlistinstalled() {
  local pkgfile=""
  local pkgname=""
  local pkgver=""
  cwgetinstalled
  for pkgname in $(cwgetallrecipes) ; do
    if [ ${cwinstalled[${pkgname}]} -eq 1 ] ; then
      pkgfile="${cwvarinst}/${pkgname}"
      pkgver="$(cat ${pkgfile})"
      echo "${pkgname} : ${pkgver}"
    fi
  done | sort
}

#
# cwlistinstalledreqs
#
function cwlistinstalledreqs() {
  local pkgfile=""
  local pkgname=""
  local pkgreqs=""
  cwgetinstalled
  for pkgname in $(cwgetallrecipes) ; do
    if [ ${cwinstalled[${pkgname}]} -eq 1 ] ; then
      pkgfile="${cwvarinst}/${pkgname}"
      pkgreqs="${cwrecipereqs[${pkgname}]}"
      echo "${pkgname} : ${pkgreqs}"
    fi
  done | sort
}

#
# cwcheckinstalled
#   receives:
#     recipe package name
#
# returns 0 if installed, 1 if not
#
function cwcheckinstalled() {
  local pkgname="${1%% *}"
  if [ -e "${cwvarinst}/${pkgname}" ] ; then
    return 0
  fi
  return 1
}

#
# cwgetinstalled
#   updates recipe installation status
#
function cwgetinstalled() {
  local pkgname=""
  if [ ! -e "${cwvarinst}" ] ; then
    cwscriptecho "directory ${cwvarinst} does not exist"
    return 1
  fi
  cwsourceprofile
  cwcheckrecipessourced || cwsourcerecipes
  for pkgname in $(cwgetallrecipes) ; do
    cwinstalled[${pkgname}]="$(cwcheckinstalled ${pkgname} && echo 1 || echo 0)"
  done
}

#
# cwlistavailable
#
# lists available but uninstalled recipes
#
function cwlistavailable() {
  local pkgname=""
  cwgetinstalled
  for pkgname in $(cwgetallrecipes) ; do
    if [ ${cwinstalled[${pkgname}]} -ne 1 ] ; then
      echo "${pkgname}"
    fi
  done | sort
}

#
# cwlistupgradable
#  can be used to recursively chase downstream upgradable reqs
#
function cwlistupgradable() {
  cwcheckrecipessourced || cwsourcerecipes
  local r
  for r in $(cwgetupgradable) ; do
    i="$(cwgetinstalledversion ${r})"
    n="$(cwver_${r})"
    echo "${r} : ${i} : ${n}"
  done | sort
  unset r
}

#
# cwgetupgradable
#   get a list of upgradable packages
function cwgetupgradable() {
  cwcheckrecipessourced || cwsourcerecipes
  cwmarkupgradable
  local r
  for r in $(cwgetallrecipes) ; do
    cwmarkedupgradable "${r}" && echo "${r}" || true
  done | sort | xargs echo
  unset r
}

#
# cwuninstall
#
# uninstall some recipes
#
function cwuninstall() {
  cwcheckrecipessourced || cwsourcerecipes
  local recipe=""
  for recipe in "${@}" ; do
    if ! declare -f "cwuninstall_${recipe}" >/dev/null 2>&1 ; then
      cwscriptecho "no uninstall found for ${recipe}"
      continue
    fi
    if $(cwcheckinstalled ${recipe}) ; then
      cwscriptecho "uninstalling ${recipe}"
      cwuninstall_${recipe}
    fi
  done
}

#
# cwgetinstalledversion
#   return installed verison of a recipe
#
function cwgetinstalledversion() {
  local r="${1}"
  local v="${r}-ERROR_NOT_INSTALLED"
  local f="${cwvarinst}/${r}"
  if [ -e "${f}" ] ; then
    v="$(cat ${f})"
  fi
  echo "${v}"
}

#
# cwgetinstalleddeps
#   returns installed depdendents for a recipe
#
function cwgetinstalleddeps() {
  local r
  for r in "${@}" ; do
    for d in $(cwgetrecipedeps ${r}) ; do
      cwcheckinstalled ${d} && echo ${d} || continue
    done
  done | sort -u | xargs echo
  unset r
}

#
# cwgetallrecipes
#   returns all recipes
#
function cwgetallrecipes() {
  cwcheckrecipessourced || cwsourcerecipes
  cwnormalizeargs ${!cwrecipes[@]} ${!cwbootstraprecipes[@]}
}

#
# cwsetupgradable
#   set a recipe as upgradable
#
function cwsetupgradble() {
  local r
  for r in "${@}" ; do
    cwupgraded["${r}"]=0
    cwtoupgrade["${r}"]=1
  done
  unset r
}

#
# cwmarkupgraded
#   toggle upgraded stats for recipe
#
function cwmarkupgraded() {
  local r
  for r in "${@}" ; do
    cwupgraded["${r}"]=1
    cwtoupgrade["${r}"]=0
  done
  unset r
}

#
# cwmarkedupgradable
#   return upgrade marking status of a recipe
#
function cwmarkedupgradable() {
  local r="${1}"
  local c=1
  test "${cwtoupgrade[${r}]}" -eq 1 && c=0 || true
  return ${c}
}

#
# cwmarkupgradable
#   iterate through recipes, if installed, mark version discrepancies
#
function cwmarkupgradable() {
  cwcheckrecipessourced || cwsourcerecipes
  local recipe
  for recipe in $(cwgetallrecipes) ; do
    cwmarkupgraded "${recipe}"
  done
  for recipe in $(cwgetallrecipes) ; do
    cwcheckinstalled "${recipe}" || continue
    cwcheckupgradable "${recipe}" && cwsetupgradble "${recipe}" || true
  done
  unset recipe
}

#
# cwupgradespending
#   returns if any upgrades are available
#
function cwupgradespending() {
  local r=1
  if [ ! -z "$(cwgetupgradable)" ] ; then
    r=0
  fi
  return ${r}
}

#
# cwcheckupgradable
#   check if a recipe is upgradable
#
function cwcheckupgradable() {
  cwcheckrecipessourced || cwsourcerecipes
  local r="${1}"
  local c=1
  cwcheckinstalled "${r}" || return "${c}"
  local i="$(cwgetinstalledversion ${r})"
  local n="$(cwver_${r})"
  if [ ! "${i}" == "${n}" ] ; then
    c=0
  fi
  return "${c}"
}

#
# cwupgrade
#
# uninstall and install recipes
#
function cwupgrade() {
  cwcheckrecipessourced || cwsourcerecipes
  local upgrade=""
  local s=""
  for upgrade in "${@}" ; do
    cwsetupgradble "${upgrade}"
  done
  cwcontains "${statictoolchain_pkgname}" "${@}" && s="${statictoolchain_pkgname}" || true
  for upgrade in ${s} ${@} ; do
    cwmarkedupgradable ${upgrade} && cwupgrade_${upgrade} || true
  done
  unset upgrade s
}

#
# cwupgradeall
#
# upgrade all packages that we can
#
function cwupgradeall() {
  cwscriptecho "upgrading any out of date recipes"
  cwupgrade $(cwgetupgradable)
}

#
# cwupgradewithdeps
#   upgrade a recipe and any installed deps
#
function cwupgradewithdeps() {
  cwcheckrecipessourced || cwsourcerecipes
  local -a ds=()
  local l r
  local s=""
  for r in "${@}" ; do
    cwsetupgradble "${r}"
    for d in $(cwgetinstalleddeps ${r}) ; do
      cwsetupgradble "${d}"
      ds+=( ${d} )
    done
  done
  cwscriptecho "upgrading ${@} and installed deps"
  l="$(cwnormalizeargs ${ds[@]})"
  cwcontains "${statictoolchain_pkgname}" ${@} ${l} && s="${statictoolchain_pkgname}" || true
  for r in ${s} ${@} ${l} ; do
    cwmarkedupgradable ${r} && cwupgrade_${r} || true
  done
  unset l r s
}

#
# cwupgradeallwithdeps
#   upgrade all dependecies, requirements, and depdendents
#
# XXX - needs to be recursive and/or track state, ugh
#
function cwupgradeallwithdeps() {
  cwscriptecho "upgrading any out of date recipes and their installed deps"
  cwcheckrecipessourced || cwsourcerecipes
  # XXX - generalize this - recipe "types"? build-only? "rdontrebuilddeps" flag in recipe?
  : ${CW_UPGRADE_ALL_WITH_DEPS_IGNORED:="bash bison bootstrapmake bmake busybox byacc cacertificates ccache cmake configgit flex less mandoc make rlwrap reflex sed sbase toybox ubase"}
  local l="$(cwgetupgradable)"
  local r
  for r in ${l} ; do
    cwcontains ${r} ${CW_UPGRADE_ALL_WITH_DEPS_IGNORED} && continue || true
    l+=" $(cwgetinstalleddeps ${r})"
  done
  cwupgrade $(cwnormalizeargs ${l})
  unset l r
}

#
# cwupgradedeps
#   upgrade all installed dependents of a given packeg
#
function cwupgradedeps() {
  cwcheckrecipessourced || cwsourcerecipes
  local l=""
  local r
  cwscriptecho "upgrading any installed dependents of ${@}"
  for r in ${@} ; do
    l+=" $(cwgetinstalleddeps ${r})"
  done
  cwupgrade $(cwnormalizeargs ${l})
  unset l r
}

#
# cwreinstall
#
# uninstall and reinstall a recipe without chasing down upgrades
# - does this need to be a cwreinstall_${rname} for customization?
#
function cwreinstall() {
  cwcheckrecipessourced || cwsourcerecipes
  local reinstall=""
  for reinstall in "${@}" ; do
    cwscriptecho "reinstalling ${reinstall}"
    cwuninstall "${reinstall}"
    cwinstall "${reinstall}"
  done
  unset reinstall
}

#
# cwupdateupgradeall
#
# update and rexec to upgrade any out-of-date recipes
#
function cwupdateupgradeall() {
  cwupdate
  exec "${cwtop}/bin/crosware" upgrade-all
}

#
# cwupdatelistupgradable
#
# update and rexec to list any upgradable recipes
#
function cwupdatelistupgradable() {
  cwupdate
  exec "${cwtop}/bin/crosware" list-upgradable
}

#
# cwenv
#
function cwenv() {
  cwcheckrecipessourced || cwsourcerecipes
  cwsourceprofile
  env
}

#
# cwset
#   XXX - ungodly slow, need caching/memoization here
#
function cwset() {
  cwcheckrecipessourced || cwsourcerecipes
  cwsourceprofile
  cwgetinstalled
  echo '#!/usr/bin/env bash'
  set
}

#
# cwmyfuncname
#   return the name of the caller so it can identify itself
#
function cwmyfuncname() {
  echo "${FUNCNAME[1]}"
}

#
# cwstubfunc
#   create, or replace, a function
#
# XXX - use "true" for now but switch to ":"
# XXX - convert recipes to use this to save some loc
#
function cwstubfunc() {
  while [[ ${#} != 0 ]] ; do
    eval "function ${1}() { true ; }"
    shift
  done
}

#
# cwechofunc
#   create a stub function that just echoes something+ out
#
# XXX - REALLY need array/hash serialization...
# XXX - printf is very finicky, fallback to echo for now
#
function cwechofunc() {
  local -a funcbody
  if [[ ${#} == 0 ]] ; then
    cwfailexit "$(cwmyfuncname): not enough args"
  elif [[ ${#} == 1 ]] ; then
    eval "function ${1}() { echo \"${1}\" ; }"
  else
    funcbody+=( "function ${1}() {")
    shift
    while [[ ${#} > 0 ]] ; do
      funcbody+=( " echo \"${1}\"; " )
      shift
    done
    funcbody+=( "}" )
  fi
  cwsourcestdin <<<"${funcbody[@]}"
  # or: cwsourcestdin < <(for i in ${!funcbody[@]} ; do echo "${funcbody[${i}]}" ; done)
  unset funcbody
}

#
# cwgetfuncs
#
function cwgetfuncs() {
  if [ ${cwfunctionssourced} -eq 1 ] ; then
    return
  fi
  cwfunctions=( $(cwset | grep -F ' ()' | cut -f1 -d' ') )
  cwfunctionssourced=1
}

#
# cwlistfuncs
#
function cwlistfuncs() {
  cwgetfuncs
  cwshowarray cwfunctions
}

#
# cwshowfunc
#
function cwshowfunc() {
  cwsourceprofile
  cwcheckrecipessourced || cwsourcerecipes
  local funclist
  if [ ${#} -le 0 ] ; then
    cwset
    return
  else
    funclist="${@}"
  fi
  for funcname in ${funclist} ; do
    declare -f "${funcname}" || cwfailexit "$(cwmyfuncname): no such function '${funcname}'"
  done
  unset funcname funclist
}

#
# cwrunfunc
#   receives:
#     at least one function name
#
# run a function that we know about
# arguments can be passed with commas
#
function cwrunfunc() {
  cwcheckrecipessourced || cwsourcerecipes
  cwsourceprofile
  #cwgetfuncs
  local cwfunc
  local cwfuncname
  for cwfunc in "${@}" ; do
    cwfuncname="${cwfunc%%,*}"
    declare -f "${cwfuncname}" >/dev/null 2>&1 || cwfailexit "$(cwmyfuncname): no such function '${cwfuncname}'"
    eval "${cwfunc//,/ }"
  done
  unset cwfunc
  unset cwfuncname
}

#
# cwdebug
#   recieves:
#     function/command and arguments
#
# run a function gated with a debug flag toggle
# XXX - corresponding CW_DEBUG var?
# XXX - should $- be checked for initial state of x flag?
#
function cwdebug() {
  cwcheckrecipessourced || cwsourcerecipes
  cwsourceprofile
  set -x
  eval "${@}"
  set +x
}

#
# show architecture(s)
#
function cwshowarch() {
  local t="a"
  if [ ${#} -ge 1 ] ; then
    t="${1}"
  fi
  if [[ ${t} == k ]] ; then
    echo "${karch}"
  elif [[ ${t} == u ]] ; then
    echo "${uarch}"
  else
    echo "k:${karch}"
    echo "u:${uarch}"
  fi
}

#
# check uniqueness of space delimited elements (for loop detection)
#   XXX - leverage uniq?
#   XXX - better as an array, i.e.:
#     l=( $(echo ${@}) )
#     t=${l[0]}
#     echo ${l} | tr ' ' '\n' | tail -$((${#l[@]}-1)) | grep -q "^${t}$" && fail
#   *or* tail -$(expr ${#l[@]} - 1)
#   XXX - literally doing car/cdr here
#   XXX - better to count?
#     i.e., a list with one element selected out of it should be exactly one less than start
#   XXX - this needs to be way better.
#   XXX - this *only* works on the top element
#   XXX - i.e., it's a stack, and if there are dupes in {n-1,0}, they won't be detected
#   XXX - use a hash:
#         local u
#         declare -A q
#         q[${t}]=0
#         for u in ${@} ; do
#           q[${u}]=1
#         done
#         if [ ${q[${t}] -eq 1 ] ; then
#           cwfailexit 'dupe...'
#         fi
#         unset a q r t u
#   XXX - not just top hash....
#         function cwcheckuniq() {
#           declare -A u=()
#           for e in "${@}" ; do
#             u["${e}"]=0
#           done
#           for e in "${@}" ; do
#             ((u[${e}]++))
#             if [[ ${u[${e}]} > 1 ]] ; then
#               cwfailexit "non-unique element '${e}' detected in stack '${@}' - possible cycle"
#             fi
#           done
#         }
#   XXX - or argument/hash counting...
#         function cwcheckuniq() {
#           declare -A u=()
#           for e in "${@}" ; do
#             u["${e}"]=1
#           done
#           c="${#u[@]}"
#           # or: c="$(($(echo ${u[@]} | tr ' ' '+')))"
#           # or: c="$(for e in ${!u[@]} ; do echo ${e} ; done | wc -l)"
#           if [ ${c} -ne ${#} ] ; then
#             cwfailexit "non-unique element detected in stack '${@}' - possible cycle"
#           fi
#         }
#
function cwcheckuniq() {
  if [[ x${@} =~ ^x$ ]] ; then
    return 0
  fi
  local a="${@}"
  shift
  local r="${@}"
  local t="${a%%${r}}"
  #local t="$(echo "${a}" | sed "s#${r}\$##g")"
  t="${t// }"
  echo "${r}" | tr ' ' '\n' | grep -q "^${t}$" && cwfailexit "non-unique element '${t}' detected in stack '${a}' - possible cycle"
  unset a r t
  return 0
}

#
# return count of arguments
# - just to dedupe the '${#}' and '${@}' that might precolate without
#
function cwcountargs() {
  echo "${#}"
}

#
# return if a string contains something
#   needle haystack
#
function cwcontains() {
  local r=1
  local -A h
  local n="${1}"
  shift
  h["${n}"]=0
  for e in ${@} ; do
    h["${e}"]=1
  done
  if [ "${h[${n}]}" -eq 1 ] ;then
    r=0
  fi
  return ${r}
}

#
# normalize argument list
# - trim duplicates
# - sort
# XXX - might be better to preserve order?
#
function cwnormalizeargs() {
  echo "${@}" \
  | tr ' ' '\n' \
  | sort -u \
  | xargs echo
}

#
# return expanded list of requirements
# - recursive, expensive so memoize
#
function cwexpandreqs() {
  cwcheckrecipessourced || cwsourcerecipes
  local r="${1}"
  if [ "${cwrecipereqsexpanded[${r}]}" -eq 1 ] ; then
    return
  fi
  local o="${2}"
  if [ ${o} -eq 0 ] ; then
    cwrecipereqsexpanded["${r}"]=1
    return
  fi
  local n
  for d in ${cwrecipeexpreqs[${r}]} ; do
    if [ ${cwrecipereqsexpanded[${d}]} -ne 1 ] ; then
      if [ $(cwcountargs ${cwrecipeexpreqs[${d}]}) -ge 1 ] ; then
        cwexpandreqs "${d}" "$(cwcountargs ${cwrecipeexpreqs[${d}]})"
      fi
    fi
    cwrecipereqsexpanded["${d}"]=1
  done
  for d in ${cwrecipeexpreqs[${r}]} ; do
    cwrecipeexpreqs["${r}"]+=" ${cwrecipeexpreqs[${d}]}"
  done
  cwrecipeexpreqs["${r}"]="$(cwnormalizeargs ${cwrecipeexpreqs[${r}]})"
  n="$(cwcountargs ${cwrecipeexpreqs[${r}]})"
  if [[ ${o} != ${n} ]] ; then
    cwexpandreqs "${r}" "${n}"
  fi
  cwrecipereqsexpanded["${r}"]=1
}

#
# get expanded reqs for a recipe
#
function cwgetexpandedreqs() {
  local r="${1}"
  test "${cwrecipereqsexpanded[${r}]}" -eq 1 || cwexpandreqs "${r}" "$(cwcountargs ${cwrecipeexpreqs[${r}]})"
  echo "${cwrecipeexpreqs[${r}]}"
}

#
# list all expanded reqs for all recipes
#
function cwlistrecipereqsexp() {
  cwcheckrecipessourced || cwsourcerecipes
  for recipe in $(cwgetallrecipes) ; do
    test "${cwrecipereqsexpanded[${recipe}]}" -eq 1 || cwgetexpandedreqs "${recipe}" >/dev/null 2>&1
    echo "${recipe} : ${cwrecipeexpreqs[${recipe}]}"
  done
}

#
# get recipe transitive reqs
# - compares declared vs. expanded recipe reqs and shows the differences
# - couple of short circuits to speed up repeated calls
#
function cwgetrecipetransitivereqs() {
  local r="${1}"
  local -A qs
  cwcheckrecipessourced || cwsourcerecipes
  test "${cwrecipereqsexpanded[${r}]}" -eq 1 || cwexpandreqs "${r}" "$(cwcountargs ${cwrecipeexpreqs[${r}]})"
  for q in ${cwrecipeexpreqs[${r}]} ; do
    qs["${q}"]=0
  done
  for q in ${cwrecipereqs[${r}]} ; do
    qs["${q}"]=1
  done
  for q in ${!qs[@]} ; do
    test "${qs[${q}]}" -eq 1 || echo "${q}"
  done | sort | xargs echo
}

#
# list transitive reqs for a recipe
# XXX - slowwwwwww
#
function cwlistrecipetransitivereqs() {
  cwcheckrecipessourced || cwsourcerecipes
  for recipe in $(cwgetallrecipes) ; do
    echo "${recipe} : $(cwgetrecipetransitivereqs ${recipe})"
  done
}

#
# get (declared) deps of a recipe
# XXX - memoize?
#
function cwgetrecipedeps() {
  local r="${1}"
  local -A ds
  cwcheckrecipessourced || cwsourcerecipes
  for recipe in $(cwgetallrecipes) ; do
    if [[ " ${cwrecipereqs[${recipe}]} " =~ " ${r} " ]] ; then
      ds["${recipe}"]=1
    fi
  done
  for d in ${!ds[@]} ; do
    echo "${d}"
  done | sort | xargs echo
}

#
# list all deps for all recipes
#
function cwlistrecipedeps() {
  cwcheckrecipessourced || cwsourcerecipes
  for recipe in $(cwgetallrecipes) ; do
    d="$(cwgetrecipedeps ${recipe})"
    echo "${recipe} : ${d}"
  done
}

#
# usage
#
function cwusage() {
  echo "usage: ${cwname} [command]"
  echo
  echo "commands:"
  for cwcmd in $(echo ${!cwcmds[@]} | tr ' ' '\n' | sort) ; do
    echo "  ${cwcmd} : ${cwcmds[${cwcmd}]}"
  done
  echo
}

#
# cwpusharray
#  push element into given array
#
# XXX - escape quotes here? this is pretty fragile
#
function cwpusharray() {
  local array element
  # XXX - should this error out?
  if [ ${#} -lt 2 ] ; then
    cwscriptecho "${FUNCNAME[0]}: not enough arguments"
    return
  fi
  array="${1}"
  shift
  for element in "${@}" ; do
    eval "${array}+=( \"${element}\" )"
  done
  unset array element
}

#
# cwshowarray
#  show an array, or cwmessages array by default
#  receives array name and optional prefix
#
# XXX - previously did a cwscriptecho
# XXX - `for i in $(eval echo \${!${a}[@]}) ; do ... ; done` for index may be clearer
#
function cwshowarray() {
  local a p n l i m
  if [ ${#} -lt 1 ] ; then
    a="cwmessages"
  else
    a="${1}"
  fi
  if [ ${#} -ge 2 ] ; then
    p="${2}: "
  else
    p=''
  fi
  n=$(eval echo "\${#${a}[@]}")
  if [ ${n} -eq 0 ] ; then
    return
  fi
  l=$((${n}-1))
  for i in $(seq 0 ${l}) ; do
    m=$(eval echo "\${${a}[${i}]}")
    echo "${p}${m}"
  done
  unset a p n l i m
}

##
## cwevalarray
##   eval the contents of an array passed as individual arguments
##
## XXX - not great
## XXX - for more specialized form (functions) need a separate array handler that append ';'
## XXX - but what about line continuations?
## XXX - serialization... just receive a chunk of "declare -a" text, reconstitute into [] and do it
## XXX - for a lot of things (function wrappers) `eval "${array[@]}"` seems okay
##
#function cwevalarray() {
#  eval "$(for (( i = ${#}; i > 0; : )) ; do printf "${1}\n" ; shift ; done)"
#}

#
# cwevalstdin
#   like '| eval' but the other way
#
# XXX - are these the same thing? not exactly, close enough for now
#
function cwevalstdin() {
  cwsourcestdin
}
function cwsourcestdin() {
  source /dev/stdin
}

#
# cwshowmessages
#  show the cwmessages array
#
function cwshowmessages() {
  cwshowarray cwmessages "${cwname}"
}

#
# cwgetuser
#   get primary user
#
function cwgetuser() {
  id \
  | tr ' ' '\n' \
  | grep ^uid= \
  | cut -f2 -d'(' \
  | tr -d ')'
}

#
# cwgetuid
#   get primary group id
#
function cwgetuid() {
  id \
  | tr ' ' '\n' \
  | grep ^uid= \
  | cut -f1 -d'(' \
  | cut -f2 -d=
}

#
# cwgetgroup
#   get primary group
#
function cwgetgroup() {
  id \
  | tr ' ' '\n' \
  | grep ^gid= \
  | cut -f2 -d'(' \
  | tr -d ')'
}

#
# cwgetgid
#   get primary group id
#
function cwgetgid() {
  id \
  | tr ' ' '\n' \
  | grep ^gid= \
  | cut -f1 -d'(' \
  | cut -f2 -d=
}

#
# cwcreatesharedlib
#   given a lib.a create a lib.so
#
# XXX - soname, version probably need to be set
#
function cwcreatesharedlib() {
  : ${CC:="gcc"}
  local extdir="${cwtmp}/${TS}_sharedlib_${$}_${RANDOM}"
  local alib="${1}"
  local olist="$(ar t ${alib} | xargs echo)"
  local solib="${2}"
  local solibdir="$(dirname ${solib})"
  if [[ ! ${solibdir} =~ ${cwtop} ]] ; then
    cwfailexit "not creating a shared lib outside of ${cwtop}"
  fi
  cwscriptecho "creating ${solib} from ${alib}"
  cwmkdir "${solibdir}"
  rm -rf "${extdir}"
  cwmkdir "${extdir}"
  rm -f "${solib}"
  pushd "${extdir}" >/dev/null 2>&1
  cwscriptecho "extracting ${alib} in ${PWD}"
  ar x "${alib}"
  cwscriptecho "creating ${solib} from object list: ${olist}"
  "${CC}" -fPIC -shared ${olist} -o "${solib}"
  popd >/dev/null 2>&1
  cwscriptecho "shared library saved to ${solib}"
  cwscriptecho "cleaning up ${extdir}"
  pushd "${cwtmp}" >/dev/null 2>&1
  rm -rf "$(basename ${extdir})"
  popd >/dev/null 2>&1
}

#############################################
# program actually starts... here... maybe. #
#############################################

#
# make sure we have a command
#
if [ ${#} -lt 1 ] ; then
  cwusage
  cwfailexit "exiting"
fi

#
# exit on unknown command
#
cmd="${1}"
if [[ ! ${cwcmdlist[@]} =~ ${cmd} ]] ; then
  if [[ ${cmd} =~ ^(--help|-h)$ ]] ; then
    cmd="help"
  else
    cwfailexit "command ${cmd} not found"
  fi
fi
shift

#
# execute our given command
#
# XXX - commands will have additional arguments, i.e., package name for install, etc.
# XXX - these cases need to be sorted... getting out of control. but i am LAZY
#
case "${cmd}" in
  bootstrap)
    cwbootstrap
    ;;
  update)
    cwupdate
    ;;
  env)
    # unnecessary, gratuitous use of cat
    test -e "${cwetc}/profile" && \
      cat "${cwetc}/profile" \
      | sed "s#^\(cwetcdir\)=.*#\1=${cwetc}#g" \
      | sed "s#^\(cwbindir\)=.*#\1=${cwbin}#g" \
      | sed "s#^\(cwtop\)=.*#\1=${cwtop}#g"
    ;;
  profile)
    cwprofileline
    ;;
  list-recipes)
    cwlistrecipes
    ;;
  list-recipe-deps)
    cwlistrecipedeps
    ;;
  list-recipe-files)
    cwlistrecipefiles
    ;;
  list-recipe-versions)
    cwlistrecipeversions
    ;;
  list-recipe-reqs)
    cwlistrecipereqs
    ;;
  list-recipe-reqs-expanded)
    cwlistrecipereqsexp
    ;;
  list-recipe-transitive-reqs)
    cwlistrecipetransitivereqs
    ;;
  list-installed)
    cwlistinstalled
    ;;
  list-installed-reqs)
    cwlistinstalledreqs
    ;;
  list-available)
    cwlistavailable
    ;;
  list-upgradable|list-upgradeable)
    cwlistupgradable
    ;;
  install)
    cwinstall "${@}"
    ;;
  uninstall)
    cwuninstall "${@}"
    ;;
  set)
    cwset
    ;;
  list-funcs)
    cwlistfuncs
    ;;
  run-func)
    cwrunfunc "${@}"
    ;;
  show-func)
    cwshowfunc "${@}"
    ;;
  show-arch)
    cwshowarch
    ;;
  show-env)
    cwenv
    ;;
  show-karch)
    cwshowarch "k"
    ;;
  show-uarch)
    cwshowarch "u"
    ;;
  upgrade)
    cwupgrade "${@}"
    ;;
  upgrade-all)
    cwupgradeall
    ;;
  upgrade-deps)
    cwupgradedeps "${@}"
    ;;
  upgrade-with-deps)
    cwupgradewithdeps "${@}"
    ;;
  upgrade-all-with-deps)
    cwupgradeallwithdeps
    ;;
  check-installed)
    cwcheckinstalled "${@}"
    ;;
  reinstall)
    cwreinstall "${@}"
    ;;
  update-upgrade-all)
    cwupdateupgradeall
    ;;
  update-list-upgradable)
    cwupdatelistupgradable
    ;;
  help)
    cwusage
    ;;
  *)
    cwfailexit "command ${cmd} not found"
    ;;
esac

# XXX - should this be in a trap so it's *always* run?
cwshowmessages cwmessages
