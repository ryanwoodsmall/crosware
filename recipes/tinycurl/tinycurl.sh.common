: ${rreqs:=""}
rreqs+=" make cacertificates zlib pkgconfig nghttp2 cares"

. "${cwrecipe}/common.sh"

# XXX - add new versions here
pn="${rname}"
pn="${pn#tinycurl772}"
pn="${pn#tinycurl}"

eval "
function cwconfigure_${rname}() {
  pushd \"${rbdir}\" >/dev/null 2>&1
  if [[ ${rname} =~ bearssl ]] ; then
    extra=\"\$(echo --with-bearssl --with-default-ssl-backend=bearssl --without-{libssh2,mbedtls,openssl,wolfssl,wolfssh})\"
  elif [[ ${rname} =~ libressl ]] ; then
    extra=\"\$(echo --with-openssl --with-default-ssl-backend=openssl --with-libssh2 --without-{bearssl,mbedtls,wolfssl,wolfssh})\"
  elif [[ ${rname} =~ mbedtls ]] ; then
    extra=\"\$(echo --with-mbedtls --with-default-ssl-backend=mbedtls --with-libssh2 --without-{bearssl,openssl,wolfssl,wolfssh})\"
  elif [[ ${rname} =~ openssl ]] ; then
    extra=\"\$(echo --with-openssl --with-default-ssl-backend=openssl --with-libssh2 --without-{bearssl,mbedtls,wolfssl,wolfssh})\"
  else
    extra=\"\$(echo --with-wolfssl --with-default-ssl-backend=wolfssl --with-wolfssh --without-{bearssl,mbedtls,openssl,libssh2})\"
  fi
  ./configure ${cwconfigureprefix} ${cwconfigurelibopts} ${rconfigureopts} ${rcommonopts} \
    --disable-dependency-tracking \
    --disable-manual \
    --enable-ares=\"${cwsw}/cares/current\" \
    --enable-ipv6 \
    \${extra} \
    --without-{gnutls,rusttls,nss} \
    --with-ca-bundle=\"${cwetc}/ssl/cert.pem\"  \
    --with-ca-path=\"${cwetc}/ssl/certs\" \
    --with-nghttp2=\"${cwsw}/nghttp2/current\" \
    --with-zlib \
      CC=\"\${CC} -Os\" \
      CFLAGS=\"-Os -Wl,-s \${CFLAGS}\" \
      CPPFLAGS=\"\$(echo -I${cwsw}/{${rreqs// /,}}/current/include)\" \
      LDFLAGS=\"\$(echo -L${cwsw}/{${rreqs// /,}}/current/lib) -static -s\" \
      PKG_CONFIG_{LIBDIR,PATH}=\"\$(echo ${cwsw}/{${rreqs// /,}}/current/lib/pkgconfig | tr ' ' ':')\"
  unset extra
  popd >/dev/null 2>&1
}
"

# XXX - shouldn't be necessary but no perl breaks the lib->docs->tool build?
eval "
function cwmake_${rname}() {
  pushd \"${rbdir}\" >/dev/null 2>&1
  make -j${cwmakejobs} ${rlibtool} || make -j${cwmakejobs} ${rlibtool}
  popd >/dev/null 2>&1
}
"

# XXX - just need to call super here
if [ ! -z "${pn}" ] ; then
  for f in fetch clean extract make ; do
    eval "
    function cw${f}_${rname}() {
      cw${f}_${rname%${pn}}
    }
    "
  done
  unset f
fi

eval "
function cwmakeinstall_${rname}() {
  pushd \"${rbdir}\" >/dev/null 2>&1
  rm -f ${ridir}/bin/{tiny-,}curl{,-config} || true
  make install ${rlibtool}
  mv \"${ridir}/bin/curl\" \"${ridir}/bin/tiny-curl\"
  mv \"${ridir}/bin/curl-config\" \"${ridir}/bin/tiny-curl-config\"
  ln -sf tiny-curl \"${ridir}/bin/${rname}\"
  ln -sf tiny-curl \"${ridir}/bin/${rname}-${rver}\"
  ln -sf tiny-curl \"${ridir}/bin/tiny-curl-${rver}\"
  \$(\${CC} -dumpmachine)-strip --strip-all \"${ridir}/bin/tiny-curl\"
  cwmkdir \"${ridir}/devbin\"
  ln -sf \"${rtdir}/current/bin/tiny-curl\" \"${ridir}/devbin/curl\"
  ln -sf \"${rtdir}/current/bin/tiny-curl-config\" \"${ridir}/devbin/curl-config\"
  popd >/dev/null 2>&1
}
"

eval "
function cwgenprofd_${rname}() {
  echo 'append_path \"${rtdir}/current/bin\"' > \"${rprof}\"
}
"

unset pn

# vim: ft=sh
